
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Apr 05 10:47:56 SGT 2020
//----------------------------------------------------

package qp.parser;

import qp.utils.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.10k generated parser.
 * @version Sun Apr 05 10:47:56 SGT 2020
 */
public class parser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public parser() {super();}

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s) {super(s);}

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[] {
                    "\000\052\000\002\003\003\000\002\002\004\000\002\003" +
                            "\005\000\002\003\005\000\002\003\007\000\002\003\005" +
                            "\000\002\003\005\000\002\003\007\000\002\003\007\000" +
                            "\002\003\007\000\002\003\011\000\002\004\010\000\002" +
                            "\004\010\000\002\004\006\000\002\004\006\000\002\004" +
                            "\011\000\002\004\011\000\002\004\007\000\002\004\007" +
                            "\000\002\005\005\000\002\005\003\000\002\007\005\000" +
                            "\002\007\003\000\002\010\005\000\002\010\003\000\002" +
                            "\011\005\000\002\011\005\000\002\011\004\000\002\011" +
                            "\004\000\002\006\005\000\002\006\006\000\002\006\006" +
                            "\000\002\006\006\000\002\006\006\000\002\006\006\000" +
                            "\002\006\004\000\002\012\003\000\002\012\003\000\002" +
                            "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
                            "\003" });

    /** Access to production table. */
    public short[][] production_table() {return _production_table;}

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[] {
                    "\000\132\000\004\020\006\001\002\000\014\002\001\023" +
                            "\115\024\114\033\113\034\116\001\002\000\004\002\112" +
                            "\001\002\000\022\004\016\011\014\025\013\026\020\027" +
                            "\007\030\012\031\010\032\015\001\002\000\004\006\107" +
                            "\001\002\000\004\006\104\001\002\000\016\002\uffed\005" +
                            "\uffed\021\uffed\024\uffed\033\uffed\034\uffed\001\002\000\004" +
                            "\006\101\001\002\000\004\006\076\001\002\000\004\021" +
                            "\072\001\002\000\020\004\016\011\060\025\013\026\020" +
                            "\027\007\030\012\031\010\001\002\000\006\003\055\010" +
                            "\056\001\002\000\006\005\024\021\025\001\002\000\004" +
                            "\006\021\001\002\000\016\004\016\025\013\026\020\027" +
                            "\007\030\012\031\010\001\002\000\004\007\023\001\002" +
                            "\000\040\002\uffe2\003\uffe2\005\uffe2\007\uffe2\012\uffe2\013" +
                            "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\023\uffe2" +
                            "\024\uffe2\033\uffe2\034\uffe2\001\002\000\016\004\016\025" +
                            "\013\026\020\027\007\030\012\031\010\001\002\000\004" +
                            "\004\026\001\002\000\020\002\uffeb\005\uffeb\022\uffeb\023" +
                            "\uffeb\024\uffeb\033\uffeb\034\uffeb\001\002\000\020\002\ufff4" +
                            "\005\030\022\031\023\ufff4\024\ufff4\033\ufff4\034\ufff4\001" +
                            "\002\000\004\004\053\001\002\000\020\003\034\004\016" +
                            "\025\013\026\020\027\007\030\012\031\010\001\002\000" +
                            "\020\003\042\012\044\013\047\014\046\015\041\016\043" +
                            "\017\045\001\002\000\016\002\uffe9\005\uffe9\023\uffe9\024" +
                            "\uffe9\033\uffe9\034\uffe9\001\002\000\004\035\040\001\002" +
                            "\000\016\002\ufff6\005\036\023\ufff6\024\ufff6\033\ufff6\034" +
                            "\ufff6\001\002\000\020\003\034\004\016\025\013\026\020" +
                            "\027\007\030\012\031\010\001\002\000\016\002\uffea\005" +
                            "\uffea\023\uffea\024\uffea\033\uffea\034\uffea\001\002\000\016" +
                            "\002\uffe5\005\uffe5\023\uffe5\024\uffe5\033\uffe5\034\uffe5\001" +
                            "\002\000\020\004\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
                            "\031\uffda\035\uffda\001\002\000\016\002\uffe6\005\uffe6\023" +
                            "\uffe6\024\uffe6\033\uffe6\034\uffe6\001\002\000\020\004\uffd8" +
                            "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\035\uffd8\001" +
                            "\002\000\020\004\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
                            "\031\uffdd\035\uffdd\001\002\000\020\004\uffd9\025\uffd9\026" +
                            "\uffd9\027\uffd9\030\uffd9\031\uffd9\035\uffd9\001\002\000\020" +
                            "\004\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\035" +
                            "\uffdb\001\002\000\020\004\uffdc\025\uffdc\026\uffdc\027\uffdc" +
                            "\030\uffdc\031\uffdc\035\uffdc\001\002\000\020\004\016\025" +
                            "\013\026\020\027\007\030\012\031\010\035\052\001\002" +
                            "\000\016\002\uffe7\005\uffe7\023\uffe7\024\uffe7\033\uffe7\034" +
                            "\uffe7\001\002\000\016\002\uffe8\005\uffe8\023\uffe8\024\uffe8" +
                            "\033\uffe8\034\uffe8\001\002\000\020\002\uffec\005\uffec\022" +
                            "\uffec\023\uffec\024\uffec\033\uffec\034\uffec\001\002\000\016" +
                            "\002\uffee\005\uffee\021\uffee\024\uffee\033\uffee\034\uffee\001" +
                            "\002\000\040\002\uffde\003\uffde\005\uffde\007\uffde\012\uffde" +
                            "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\021\uffde\023" +
                            "\uffde\024\uffde\033\uffde\034\uffde\001\002\000\004\004\057" +
                            "\001\002\000\040\002\uffe4\003\uffe4\005\uffe4\007\uffe4\012" +
                            "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4" +
                            "\023\uffe4\024\uffe4\033\uffe4\034\uffe4\001\002\000\004\021" +
                            "\066\001\002\000\006\005\024\021\062\001\002\000\004" +
                            "\004\026\001\002\000\020\002\ufff0\005\030\022\064\023" +
                            "\ufff0\024\ufff0\033\ufff0\034\ufff0\001\002\000\020\003\034" +
                            "\004\016\025\013\026\020\027\007\030\012\031\010\001" +
                            "\002\000\016\002\ufff2\005\036\023\ufff2\024\ufff2\033\ufff2" +
                            "\034\ufff2\001\002\000\004\004\026\001\002\000\020\002" +
                            "\uffef\005\030\022\070\023\uffef\024\uffef\033\uffef\034\uffef" +
                            "\001\002\000\020\003\034\004\016\025\013\026\020\027" +
                            "\007\030\012\031\010\001\002\000\016\002\ufff1\005\036" +
                            "\023\ufff1\024\ufff1\033\ufff1\034\ufff1\001\002\000\004\004" +
                            "\026\001\002\000\020\002\ufff3\005\030\022\074\023\ufff3" +
                            "\024\ufff3\033\ufff3\034\ufff3\001\002\000\020\003\034\004" +
                            "\016\025\013\026\020\027\007\030\012\031\010\001\002" +
                            "\000\016\002\ufff5\005\036\023\ufff5\024\ufff5\033\ufff5\034" +
                            "\ufff5\001\002\000\016\004\016\025\013\026\020\027\007" +
                            "\030\012\031\010\001\002\000\004\007\100\001\002\000" +
                            "\040\002\uffe3\003\uffe3\005\uffe3\007\uffe3\012\uffe3\013\uffe3" +
                            "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\021\uffe3\023\uffe3\024" +
                            "\uffe3\033\uffe3\034\uffe3\001\002\000\016\004\016\025\013" +
                            "\026\020\027\007\030\012\031\010\001\002\000\004\007" +
                            "\103\001\002\000\040\002\uffe0\003\uffe0\005\uffe0\007\uffe0" +
                            "\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021" +
                            "\uffe0\023\uffe0\024\uffe0\033\uffe0\034\uffe0\001\002\000\016" +
                            "\004\016\025\013\026\020\027\007\030\012\031\010\001" +
                            "\002\000\004\007\106\001\002\000\040\002\uffdf\003\uffdf" +
                            "\005\uffdf\007\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
                            "\uffdf\017\uffdf\021\uffdf\023\uffdf\024\uffdf\033\uffdf\034\uffdf" +
                            "\001\002\000\016\004\016\025\013\026\020\027\007\030" +
                            "\012\031\010\001\002\000\004\007\111\001\002\000\040" +
                            "\002\uffe1\003\uffe1\005\uffe1\007\uffe1\012\uffe1\013\uffe1\014" +
                            "\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1\023\uffe1\024\uffe1" +
                            "\033\uffe1\034\uffe1\001\002\000\004\002\000\001\002\000" +
                            "\004\035\132\001\002\000\016\004\016\025\013\026\020" +
                            "\027\007\030\012\031\010\001\002\000\016\004\016\025" +
                            "\013\026\020\027\007\030\012\031\010\001\002\000\004" +
                            "\035\117\001\002\000\004\002\ufffb\001\002\000\014\002" +
                            "\uffff\005\024\024\122\033\121\034\123\001\002\000\004" +
                            "\035\126\001\002\000\016\004\016\025\013\026\020\027" +
                            "\007\030\012\031\010\001\002\000\004\035\124\001\002" +
                            "\000\004\002\ufff8\001\002\000\006\002\ufffd\005\024\001" +
                            "\002\000\006\002\ufff9\034\127\001\002\000\004\035\130" +
                            "\001\002\000\004\002\ufff7\001\002\000\006\002\ufffe\005" +
                            "\024\001\002\000\006\002\ufffc\034\133\001\002\000\004" +
                            "\035\134\001\002\000\004\002\ufffa\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {return _action_table;}

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[] {
                    "\000\132\000\006\003\004\004\003\001\001\000\002\001" +
                            "\001\000\002\001\001\000\006\005\016\006\010\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
                            "\005\060\006\010\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\006\021\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\006\053\001\001\000" +
                            "\004\007\026\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\010\006\031\010\034\011\032\001" +
                            "\001\000\004\012\047\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\006\006\031\011\036\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\006\050\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\007\062\001\001\000\002\001\001\000\010" +
                            "\006\031\010\064\011\032\001\001\000\002\001\001\000" +
                            "\004\007\066\001\001\000\002\001\001\000\010\006\031" +
                            "\010\070\011\032\001\001\000\002\001\001\000\004\007" +
                            "\072\001\001\000\002\001\001\000\010\006\031\010\074" +
                            "\011\032\001\001\000\002\001\001\000\004\006\076\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\006\101" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
                            "\104\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\006\107\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\006\005\130\006\010" +
                            "\001\001\000\006\005\117\006\010\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\006\005\124\006\010\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {return _reduce_table;}

    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions()
    {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int                        act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack            stack,
            int                        top)
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {return 0;}
    /** Indicates start production. */
    public int start_production() {return 1;}

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {return 0;}

    /** <code>error</code> Symbol index. */
    public int error_sym() {return 1;}




    public SQLQuery query;

    public SQLQuery getSQLQuery() {
        return query;
    }

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error("Fatal error occurred, stop parsing.", info);
    }

    public void syntax_error(Symbol cur_token){}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack            CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception
    {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num)
        {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // op ::= EQUAL
            {
                Condition RESULT = null;

                RESULT = new Condition(Condition.EQUAL);

                CUP$parser$result = new java_cup.runtime.Symbol(8/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // op ::= NOTEQUAL
            {
                Condition RESULT = null;

                RESULT = new Condition(Condition.NOTEQUAL);

                CUP$parser$result = new java_cup.runtime.Symbol(8/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // op ::= GTOE
            {
                Condition RESULT = null;

                RESULT = new Condition(Condition.GTOE);

                CUP$parser$result = new java_cup.runtime.Symbol(8/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // op ::= LTOE
            {
                Condition RESULT = null;

                RESULT = new Condition(Condition.LTOE);

                CUP$parser$result = new java_cup.runtime.Symbol(8/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // op ::= GREATERTHAN
            {
                Condition RESULT = null;

                RESULT = new Condition(Condition.GREATERTHAN);

                CUP$parser$result = new java_cup.runtime.Symbol(8/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // op ::= LESSTHAN
            {
                Condition RESULT = null;

                RESULT = new Condition(Condition.LESSTHAN);

                CUP$parser$result = new java_cup.runtime.Symbol(8/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // attribute ::= ID error
            {
                Attribute RESULT = null;
                int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                System.out.println("syntax error: incorrect attribute:"+ i.text());
                System.exit(0);

                CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // attribute ::= AVG LEFTBRACKET attribute RIGHTBRACKET
            {
                Attribute RESULT = null;
                int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                at.setAggType(Attribute.AVG);
                RESULT = at;

                CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // attribute ::= COUNT LEFTBRACKET attribute RIGHTBRACKET
            {
                Attribute RESULT = null;
                int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                at.setAggType(Attribute.COUNT);
                RESULT = at;

                CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // attribute ::= SUM LEFTBRACKET attribute RIGHTBRACKET
            {
                Attribute RESULT = null;
                int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                at.setAggType(Attribute.SUM);
                RESULT = at;

                CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // attribute ::= MIN LEFTBRACKET attribute RIGHTBRACKET
            {
                Attribute RESULT = null;
                int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                at.setAggType(Attribute.MIN);
                RESULT = at;

                CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // attribute ::= MAX LEFTBRACKET attribute RIGHTBRACKET
            {
                Attribute RESULT = null;
                int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                at.setAggType(Attribute.MAX);
                RESULT = at;

                CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // attribute ::= ID DOT ID
            {
                Attribute RESULT = null;
                int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                TokenValue i1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                TokenValue i2 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                RESULT = new Attribute(i1.text(),i2.text());

                CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // condition ::= error STRINGLIT
            {
                Condition RESULT = null;
                int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                System.out.println("syntax error: incorrect condition:"+s.text());
                System.exit(0);

                CUP$parser$result = new java_cup.runtime.Symbol(7/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // condition ::= attribute error
            {
                Condition RESULT = null;
                int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                System.out.println("syntax error: incorrect condition");
                System.exit(0);

                CUP$parser$result = new java_cup.runtime.Symbol(7/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // condition ::= attribute op attribute
            {
                Condition RESULT = null;
                int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                Attribute a1 = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                Attribute a2 = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                Condition c = new Condition(a1,o.getExprType(),a2);
                c.setOpType(Condition.JOIN);
                RESULT = c;

                CUP$parser$result = new java_cup.runtime.Symbol(7/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // condition ::= attribute op STRINGLIT
            {
                Condition RESULT = null;
                int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                Condition c = new Condition(at,o.getExprType(),s.text());
                c.setOpType(Condition.SELECT);
                RESULT = c;

                CUP$parser$result = new java_cup.runtime.Symbol(7/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // conditionlist ::= condition
            {
                ArrayList RESULT = null;
                int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                ArrayList<Condition> clist = new ArrayList<>();
                clist.add(c);
                RESULT = clist;

                CUP$parser$result = new java_cup.runtime.Symbol(6/*conditionlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // conditionlist ::= conditionlist COMMA condition
            {
                ArrayList RESULT = null;
                int clistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int clistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                ArrayList clist = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                clist.add(c);
                RESULT = clist;

                CUP$parser$result = new java_cup.runtime.Symbol(6/*conditionlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // tablelist ::= ID
            {
                ArrayList RESULT = null;
                int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                ArrayList<String> tlist = new ArrayList<>();
                tlist.add(i.text());
                RESULT = tlist;

                CUP$parser$result = new java_cup.runtime.Symbol(5/*tablelist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // tablelist ::= tablelist COMMA ID
            {
                ArrayList RESULT = null;
                int tlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int tlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                ArrayList tlist = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                tlist.add(i.text());
                RESULT = tlist;

                CUP$parser$result = new java_cup.runtime.Symbol(5/*tablelist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // attlist ::= attribute
            {
                ArrayList RESULT = null;
                int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                ArrayList<Attribute> v = new ArrayList<>();
                v.add(at);
                RESULT = v;

                CUP$parser$result = new java_cup.runtime.Symbol(3/*attlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // attlist ::= attlist COMMA attribute
            {
                ArrayList RESULT = null;
                int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                ArrayList as = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                Attribute a = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                as.add(a);
                RESULT = as;

                CUP$parser$result = new java_cup.runtime.Symbol(3/*attlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // sqlquery ::= SELECT DISTINCT STAR FROM tablelist
            {
                SQLQuery RESULT = null;
                int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                ArrayList<Attribute> a = new ArrayList<>();
                SQLQuery sq = new SQLQuery(a,t);
                sq.setIsDistinct(true);
                RESULT = sq;

                CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // sqlquery ::= SELECT DISTINCT attlist FROM tablelist
            {
                SQLQuery RESULT = null;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                SQLQuery sq = new SQLQuery(a,t);
                sq.setIsDistinct(true);
                RESULT = sq;

                CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // sqlquery ::= SELECT DISTINCT STAR FROM tablelist WHERE conditionlist
            {
                SQLQuery RESULT = null;
                int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                ArrayList<Attribute> a = new ArrayList<>();
                SQLQuery sq = new SQLQuery(a,t,c);
                sq.setIsDistinct(true);
                RESULT = sq;

                CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // sqlquery ::= SELECT DISTINCT attlist FROM tablelist WHERE conditionlist
            {
                SQLQuery RESULT = null;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                SQLQuery sq = new SQLQuery(a,t,c);
                sq.setIsDistinct(true);
                RESULT = sq;

                CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // sqlquery ::= SELECT STAR FROM tablelist
            {
                SQLQuery RESULT = null;
                int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                ArrayList<Attribute> a = new ArrayList<>();
                SQLQuery sq = new SQLQuery(a,t);
                RESULT = sq;

                CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // sqlquery ::= SELECT attlist FROM tablelist
            {
                SQLQuery RESULT = null;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                SQLQuery sq = new SQLQuery(a,t);
                RESULT = sq;

                CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // sqlquery ::= SELECT STAR FROM tablelist WHERE conditionlist
            {
                SQLQuery RESULT = null;
                int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                ArrayList<Attribute> a = new ArrayList<>();
                SQLQuery sq = new SQLQuery(a,t,c);
                RESULT = sq;

                CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // sqlquery ::= SELECT attlist FROM tablelist WHERE conditionlist
            {
                SQLQuery RESULT = null;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                SQLQuery sq = new SQLQuery(a,t,c);
                RESULT = sq;

                CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // finalquery ::= sqlquery GROUPBY attlist LIMIT STRINGLIT OFFSET STRINGLIT
            {
                SQLQuery RESULT = null;
                int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
                SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                TokenValue b = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                s.setGroupByList(a);
                s.setLimit(b);
                s.setOffset(c);
                parser.query = s;
                RESULT = s;

                CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // finalquery ::= sqlquery GROUPBY attlist OFFSET STRINGLIT
            {
                SQLQuery RESULT = null;
                int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                TokenValue b = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                s.setGroupByList(a);
                s.setOffset(b);
                parser.query = s;
                RESULT = s;

                CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // finalquery ::= sqlquery GROUPBY attlist LIMIT STRINGLIT
            {
                SQLQuery RESULT = null;
                int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                TokenValue b = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                s.setGroupByList(a);
                s.setLimit(b);
                parser.query = s;
                RESULT = s;

                CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // finalquery ::= sqlquery LIMIT STRINGLIT OFFSET STRINGLIT
            {
                SQLQuery RESULT = null;
                int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                TokenValue b = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                s.setLimit(a);
                s.setOffset(b);
                parser.query = s;
                RESULT = s;

                CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // finalquery ::= sqlquery OFFSET STRINGLIT
            {
                SQLQuery RESULT = null;
                int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                s.setOffset(a);
                parser.query = s;
                RESULT = s;

                CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // finalquery ::= sqlquery LIMIT STRINGLIT
            {
                SQLQuery RESULT = null;
                int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                s.setLimit(a);
                parser.query = s;
                RESULT = s;

                CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // finalquery ::= sqlquery GROUPBY attlist ORDERBY attlist
            {
                SQLQuery RESULT = null;
                int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                s.setGroupByList(a);
                s.setOrderByList(b);
                parser.query = s;
                RESULT = s;

                CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // finalquery ::= sqlquery ORDERBY attlist
            {
                SQLQuery RESULT = null;
                int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                s.setOrderByList(a);
                parser.query = s;
                RESULT = s;

                CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // finalquery ::= sqlquery GROUPBY attlist
            {
                SQLQuery RESULT = null;
                int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                s.setGroupByList(a);
                parser.query = s;
                RESULT = s;

                CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= finalquery EOF
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                SQLQuery start_val = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                RESULT = start_val;
                CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // finalquery ::= sqlquery
            {
                SQLQuery RESULT = null;
                int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
                SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                parser.query = s;
                RESULT = s;

                CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
            return CUP$parser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}

